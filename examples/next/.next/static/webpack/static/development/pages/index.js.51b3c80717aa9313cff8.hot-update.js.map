{"version":3,"file":"static/webpack/static/development/pages/index.js.51b3c80717aa9313cff8.hot-update.js","sources":["webpack:///./services/starwars.service.js"],"sourcesContent":["\n/**\n *  Example using the Start Wars API & Â¡Imports!\n */\n// const { GraphQLServer } = require('graphql-yoga');\nconst graphql = require('graphql').graphql;\nconst axios = require('axios');\nconst { makeExecutableSchema, mergeSchemas } = require('graphql-tools');\nconst typePerson = require('./schemas/person.graphql');\nconst typePlanet = require('./schemas/planet.graphql');\nconst typeFilm = require('./schemas/film.graphql');\nconst typeQuery = require('./schemas/query.graphql');\n\nconst { print } = require('graphql/language/printer');\n\n\n\n/**\n *  Resolvers\n *  In this object you'll map all the types defined on typeDefs\n *  You can mutate the data here, and make API calls for every type or attribute of the type\n */\nconst resolvers = {\n  Person: {\n    homeworld: async root => {\n      const response = await axios.get(root.homeworld);\n      return response.data;\n    },\n    films: (root) => {\n      const promises = root.films.map(async(url) => {\n        const response = await axios.get(url);\n        return response.data;\n      });\n\n      return Promise.all(promises);\n    },\n\n  },\n  Query: {\n    getPersons: async() => {\n      const response = await axios.get(`https://swapi.co/api/people`);\n      return response.data.results;\n    },\n    getPerson: async (_, { id }) => {\n      const response = await axios.get(`https://swapi.co/api/people/${id}`)\n      return response.data;\n    },\n  },\n};\n\nconst schemaQuery = makeExecutableSchema({ typeDefs: [\n  print(typeFilm),\n  print(typePerson),\n  print(typePlanet), \n  print(typeQuery),\n], resolvers });\n\n/**\n *  This will export the new schema\n */\n\nexport default async(name) => {\n  return await graphql(schemaQuery, `{ \n    getPersons {\n      name\n    } \n  }`);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;;;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAIA;;;;;;;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAKA;AACA;AAZA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AALA;AAhBA;AA4BA;AAAA;AAKA;AALA;AAOA;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}