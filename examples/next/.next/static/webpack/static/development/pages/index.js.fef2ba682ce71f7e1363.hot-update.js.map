{"version":3,"file":"static/webpack/static/development/pages/index.js.fef2ba682ce71f7e1363.hot-update.js","sources":["webpack:///./services/starwars.service.js"],"sourcesContent":["\n/**\n *  Real world example\n */\n\n/**\n * Module dependencies\n */\nconst graphql = require('graphql').graphql;\nconst axios = require('axios');\nconst { makeExecutableSchema, mergeSchemas } = require('graphql-tools');\nconst { print } = require('graphql/language/printer');\n\n/**\n * Schemas\n */\nconst typePerson = require('./schemas/person.graphql');\nconst typePlanet = require('./schemas/planet.graphql');\nconst typeSpecie = require('./schemas/specie.graphql');\nconst typeFilm = require('./schemas/film.graphql');\nconst typeQuery = require('./schemas/query.graphql');\n\n\n\n/**\n *  Resolvers\n *  In this object you'll map all the types defined on typeDefs\n *  You can mutate the data here, and make API calls for every type or attribute of the type\n */\nconst resolvers = {\n  Person: {\n    homeworld: async root => {\n      const response = await axios.get(root.homeworld);\n      return response.data;\n    },\n    species: (root) => {\n      const promises = root.species.map(async(url) => {\n        const response = await axios.get(url);\n        return response.data;\n      });\n\n      return Promise.all(promises);\n    },\n    films: (root) => {\n      const promises = root.films.map(async(url) => {\n        const response = await axios.get(url);\n        return response.data;\n      });\n\n      return Promise.all(promises);\n    },\n\n  },\n  Query: {\n    getPersons: async(_, { limit }) => {\n      const response = await axios.get(`https://swapi.co/api/people`);\n      return response.data.results.slice(0, limit);\n    },\n    getPerson: async (_, { id }) => {\n      const response = await axios.get(`https://swapi.co/api/people/${id}`)\n      return response.data;\n    },\n  },\n};\n\n/**\n * Merge Schemas & resolvers\n */\nconst schemaQuery = makeExecutableSchema({ typeDefs: [\n  print(typeFilm),\n  print(typePerson),\n  print(typePlanet),\n  print(typeSpecie), \n  print(typeQuery),\n], resolvers });\n\n\n/**\n * Queries methods\n */\nconst getPersons = async() => {\n  return await graphql(schemaQuery, `{ \n    getPersons(limit: 9) {\n      name\n      url\n      species {\n        name\n      }\n    } \n  }`);\n}\n\nconst getPersonById = async(id) => {\n  return await graphql(schemaQuery, `{ \n    getPerson(id: ${id}) {\n      name\n      height\n      mass\n      hair_color\n      skin_color\n      eye_color\n      birth_year\n      gender\n      homeworld {\n        name\n      }\n      species {\n        name\n      }\n      films {\n        title\n      }\n    } \n  }`);\n}\n\n/**\n * Expose\n */\nexport default {\n  getPersonById,\n  getPersons,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;;;;AAIA;;;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;;;;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;;;;;;;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAKA;AACA;AApBA;AAuBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AALA;AAxBA;AAoCA;;;;AAGA;AAAA;AAMA;AANA;AASA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAwBA;;;;;AAGA;AACA;AACA;AAFA;;;;A","sourceRoot":""}